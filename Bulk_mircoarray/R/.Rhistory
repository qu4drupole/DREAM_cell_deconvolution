all.20.m <- melt(data=all.20, id.vars = "symbol", measure.vars = 5:10)
?ddply
nba.m <- melt(nba)
ddply(nda.m,.(variable),transform)
library(plyr)
ddply(nda.m,.(variable),transform)
ddply(nba.m,.(variable),transform)
View(nba.m)
ddply(nba.m,.(variable),transform,rescale=rescale(value))
nba.m
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#making the heatmap
#want top 20 and only col 1,6,8,9
deseq.20 <- deseq_all[1:20,c(1,6,8,9)]
counts.20 <- all_genes[pull(deseq.20,1),]
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20.m <- melt(data=all.20, id.vars = "symbol", measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
?melt
#going to need to rescale all the values...
all.20.m <- melt(data=all.20, id.vars = c("symbol","log2FoldChange"), measure.vars = 5:10)
View(all.20.m)
all.20.m <- all.20.m[order(all.20.m$log2FoldChange,decreasing = T),]
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20.m$symbol <- factor(all.20.m$symbol, levels = (all.20.m$symbol)[order(all.20.m$log2FoldChange)])
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$padj)])
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$padj,all.20$log2FoldChange)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
counts.20 <- all_genes[pull(deseq.20,1),]
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#make a ranking variable
all.20$rankp <- 1/all.20$padj
View(all.20)
ceiling(all.20$log2FoldChange)
sign(all.20$log2FoldChange)
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
View(all.20)
apply(all.20[,5:10],1,rescale)
a<-apply(all.20[,5:10],1,rescale)
View(a)
a<-t(apply(all.20[,5:10],1,rescale))
?apply
apply(all.20[,5:10],1,function(x) x/max(x))
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/mean(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
sigUP_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigUP_KEGG.txt")
View(sigUP_KEGG)
sigDown_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigDown_KEGG.txt")
View(sigDown_KEGG)
View(all.20)
all.20 <- cbind(deseq.20,counts.20)
all.20[,c(9,10)]<-all.20[,10,9]
View(all.20)
all.20 <- cbind(deseq.20,counts.20)
all.20[,c(9,10)]<-all.20[,c(10,9)]
View(all.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
?strsplit
strsplit(sigUP_KEGG$Term[1],":")
strsplit(sigUP_KEGG$Term[1],:)
str(sigUP_KEGG)
sigDown_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigDown_KEGG.txt", stringsAsFactors=FALSE)
View(sigDown_KEGG)
sigUP_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigUP_KEGG.txt", stringsAsFactors=FALSE)
View(sigUP_KEGG)
strsplit(sigUP_KEGG$Term,":")
strsplit(sigUP_KEGG$Term,":")[][2]
strsplit(sigUP_KEGG$Term,":")[[2]]
strsplit(sigUP_KEGG$Term,":")[[]][2]
pull(strsplit(sigUP_KEGG$Term,":"),2)
?do
do(sigUP_KEGG, strsplit(.,":")[[2]][2])
do(sigUP_KEGG, strsplit(.,":")[[2]])
?do.call
?get
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- vector()
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- character()
?character
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- character(length = nrow(sigDown_KEGG))
sigUP_KEGG$path <- character(length = nrow(sigUP_KEGG))
strsplit(sigDown_KEGG$Term[1],":")[[2]]
strsplit(sigDown_KEGG$Term[1],":")[[1]]
strsplit(sigDown_KEGG$Term[1],":")[[1]][2]
strsplit(sigDown_KEGG$Term[1],":")[[]][2]
#split the "terms"
for(i in 1:nrow(sigDown_KEGG)){
sigDown_KEGG$path[i] <- strsplit(sigDown_KEGG$Term[i])[[1]][2]
}
#split the "terms"
for(i in 1:nrow(sigDown_KEGG)){
sigDown_KEGG$path[i] <- strsplit(sigDown_KEGG$Term[i],":")[[1]][2]
}
for(i in 1:nrow(sigUP_KEGG)){
sigUP_KEGG$path[i] <- strsplit(sigUP_KEGG$Term[i],":")[[1]][2]
}
?barplot
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T)
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
par(mai=c(1,2,1,1))
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
par(mai=c(1,3,1,1))
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab = "counts")
12/0.1176
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Counts")
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Enrichment")
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(order(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")[1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")[1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")][1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5]
sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),10][1:5]
sigUP_KEGG[sort(sigUP_KEGG$Fold.Enrichment),"path"]
sigUP_KEGG[sort(sigUP_KEGG$Fold.Enrichment),10]
sort(sigUP_KEGG$Fold.Enrichment)
order(sigUP_KEGG$Fold.Enrichment)
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Fold.Enrichment),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Count[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Count[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Counts")
barplot(sort(sigUP_KEGG$Count[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Count[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Counts")
barplot(sort(sigUP_KEGG$Fold.Enrichment[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigUP_KEGG$Fold.Enrichment[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment", xlim = c(0,10))
# NOT RUN {
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
install.packages('knitr', dependencies = TRUE)
library(knitr)
library(readxl)
allTrials <- read_excel("D:/Lowry_lab/Data/Mycobacteria_MolScreen/10-hexadecenoic acid/raw_summary_forSPSS.xlsx")
View(allTrials)
#Load summarized data from \Lowry_lab\data
library(reshape2)
library(lme4)
library(ggplot2)
?melt
il6.data <- melt(allTrials,id.vars = c("concentration","time"),variable.name = "rep")
View(il6.data)
il6.data$concentration <- factor(il6.data$concentration)
il6.data$time <- factor(il6.data$time)
str(il6.data)
il6.data$trmt <- il6.data$concentration != 0
il6.data$trmt <- as.numeric(il6.data$concentration != 0)
?lmer
lmer(value~time+trmt*concentration+(1|rep),data=il6.data)
summary(lmer(value~time+trmt*concentration+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time+trmt+(1|rep),data=il6.data))
m1 <- lmer(value~time+trmt+concentration+(1|rep),data=il6.data)
anova(m1)
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
install.packages("lmerTest")
library(lmerTest)
lmer(value~time+trmt+concentration+(1|rep),data=il6.data)
anova(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time*concentration+trmt+(1|rep),data=il6.data))
system("dir")
system("ls")
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
filename
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
mean(x)
set.seed(1)
abs(mean(x) - mean(sample(x,5)))
set.seed(5)
abs(mean(x) - mean(sample(x,5)))
?unlist
set.seed(1)
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
n<-1000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
n<-10000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
set.seed(1)
n<-10000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
set.seed(1)
n<-1000
nulls<-vector("numeric",n)
nulls[i] <- mean(sample(x,50))
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,50))
}
mean(abs(nulls-mean(x))>1)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- read.csv(filename)
dat <- na.omit( dat )
?filter
View(dat)
x<-filter(dat, Sex=="M", Diet =="chow")
x<-filter(dat, Sex=="M", Diet =="chow")
x<-filter(dat, Sex=="M")
library(dplyr)
x<-filter(dat, Sex=="M")
x<-filter(dat, Sex=="M", Diet="chow")
x<-filter(dat, Sex=="M", Diet=="chow")
mean(x$Bodyweight)
mean(x)
mean(as.matrix(x))
install.packages("rafalib")
library(rafalib)
x <- x %>% select(Bodyweight) %>% unlist
x
popsd(x)
?popsd
sd(x)
set.seed(1)
mean(sample(x,25))
mean(filter(dat,Sex=="M",Diet=="hf") %>% select(Bodyweight) %>% unlist)
popsd(filter(dat,Sex=="M",Diet=="hf") %>% select(Bodyweight) %>% unlist)
save.image("~/EdX/Statistics and R/Week2/data.RData")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("GEOquery")
biocLite("limma")
library(GEOquery)
gset <- getGEO("GSE8969", GSEMatrix =TRUE, AnnotGPL=TRUE)
install.packages("OpenSSL")
install.packages("openssl")
library(openssl)
gset <- getGEO("GSE8969", GSEMatrix =TRUE, AnnotGPL=TRUE)
version
shiny::runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/COMPACT/COMPACT')
shiny::runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/COMPACT/COMPACT')
summary(Default)
install.packages("ISLR")
library(ISLR)
data("Default")
density(Default$balance)
plot(density(Default$balance))
View(Default)
plot(density(Default$balance[Default$default=="No"]))
plot(density(Default$balance[Default$default=="Yes"]))
plot(density(Default$balance))
plot(density(Default$income[Default$default=="No"]))
plot(density(Default$income[Default$default=="Yes"]))
###############################################################
# LOADING THE DATA
# I need some sort of way to read in what the cell types are...or just type them
coarseCellTypes = c('CD4.T.cells', 'CD8.T.cells', 'NK.cells', 'B.cells', 'monocytic.lineage', 'neutrophils', 'endothelial.cells', 'fibroblasts')
for(ct in coarseCellTypes){}
for(ct in coarseCellTypes){print(ct)}
setwd("D:/Dropbox (SBG)/David-Smith/Jefferson-Desktop/DREAM challenge/Data_import-processing/Microarray/R")
setwd("~/GitHub/DREAM_cell_deconvolution/Bulk_mircoarray/R")
test <- read.csv('../mixed_dfs/B.cells.csv', row.names = 1)
test[1:5,1:5]
paste0('../mixed_dfs/','B.cell,'.csv')
paste0('../mixed_dfs/','B.cell','.csv')
# so i'm doing it manually and saving the data frames
B.cells <- read.csv('../mixed_dfs/B.cells.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
NK.cells <- read.csv('../mixed_dfs/NK.cells.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
CD8.T.cells <- read.csv('../mixed_dfs/CD8.T.cells.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
CD4.T.cells <- read.csv('../mixed_dfs/CD4.T.cells.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
monocytic.lineage <- read.csv('../mixed_dfs/monocytic.lineage.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
neutrophils <- read.csv('../mixed_dfs/neutrophils.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
endothelial.cells <- read.csv('../mixed_dfs/endothelial.cells.csv', row.names = 1)
# so i'm doing it manually and saving the data frames
fibroblasts <- read.csv('../mixed_dfs/fibroblasts.csv', row.names = 1)
save.image("~/GitHub/DREAM_cell_deconvolution/Bulk_mircoarray/R/coarse_cell_data.RData")
library(WGCNA)
library(tibble)
library(ape)
library(factoextra)
library(glmnet)
library(FNN)
library(dplyr)
#####
# Creating and saving an object with gene module identity and eigengenes...
#
# WORKING WITH A SINGLE COARSE CELL TYPE
#   [1] "b"      "CD4"    "CD8"    "nk"     "neutro" "mono"   "fibro"  "endo"
#
# First trial with neutrophils. They seem to be the most different in tSNE
#####
powers = c(c(1:10), seq(from = 12, to=20, by=2))
s = abs(bicor(neutrophils))
sft = pickSoftThreshold(neutrophils, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab='Soft Threshold (power)',ylab='Scale Free Topology Model Fit,signed R^2',
type='n', main = paste('Scale independence'))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=1,col='red'); abline(h=0.90,col='red')
# correlations look strange...
beta = 7
a = s^beta
# w = 1-a
TOM = TOMsimilarity(a)
sum(is.na(neutrophils))
neutrophils[1:10,1:10]
neutrophils[50:60,1:10]
dim(neutrophils)
B.cells <- t(B.cells)
CD4.T.cells <- t(CD4.T.cells)
CD8.T.cells <- t(CD8.T.cells)
endothelial.cells <- t(endothelial.cells)
fibroblasts <- t(fibroblasts)
monocytic.lineage <- t(monocytic.lineage)
neutrophils <- t(neutrophils)
NK.cells <- t(NK.cells)
s = abs(bicor(neutrophils))
sft = pickSoftThreshold(neutrophils, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab='Soft Threshold (power)',ylab='Scale Free Topology Model Fit,signed R^2',
type='n', main = paste('Scale independence'))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=1,col='red'); abline(h=0.90,col='red')
# correlations look strange...
beta = 12
a = s^beta
# w = 1-a
TOM = TOMsimilarity(a)
cell_df_list = list('bcell'=B.cells, "cd4"=CD4.T.cells, "cd8"=CD8.T.cells, 'endo'=endothelial.cells,
"fibro"=fibroblasts, "mono"=monocytic.lineage, "neutro"=neutrophils, "nkcells"=NK.cells)
save(cell_df_list, file='coarse_cell_data.RData')
dissTOM = 1-TOM
cell_df_list = list('bcell'=B.cells, "cd4"=CD4.T.cells, "cd8"=CD8.T.cells, 'endo'=endothelial.cells,
"fibro"=fibroblasts, "mono"=monocytic.lineage, "neutro"=neutrophils, "nkcells"=NK.cells)
collectGarbage()
rm(s)
dissTOM = 1-TOM
geneTree = hclust(as.dist(dissTOM), method = 'average')
rm(TOM)
geneTree = hclust(as.dist(dissTOM), method = 'average')
modules = cutreeDynamic(dendro = geneTree, distM = dissTOM, deepSplit = 4, pamRespectsDendro = FALSE,
minClusterSize = 30)
module.colours = labels2colors(modules)
plotDendroAndColors(geneTree, module.colours, 'Module colours', dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05, main='')
MEs = moduleEigengenes(neutro_cell_df, colors = module.colours, excludeGrey = FALSE)$eigengenes
cell_df_list['neutro'][1:5,1:5]
unlist(cell_df_list['neutro'])[1:5,1:5]
str(cell_df_list['neutro'])
str(cell_df_list[['neutro']])
cell_df_list[['neutro']][1:5,1:5]
MEs = moduleEigengenes(cell_df_list[['neutro']], colors = module.colours, excludeGrey = FALSE)$eigengenes
MEDiss = 1-cor(MEs)
METree = hclust(as.dist(MEDiss), method = "average")
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
MEDissThres = 0.025
abline(h=MEDissThres, col = "red")
merge = mergeCloseModules(neutro_cell_df, module.colours, cutHeight = MEDissThres, verbose = 3)
merge = mergeCloseModules(cell_df_list[['neutro']], module.colours, cutHeight = MEDissThres, verbose = 3)
mergedColors = merge$colors
mergedMEs = merge$newMEs
plotDendroAndColors(geneTree, cbind(module.colours, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
head(mergedColors)
save(neutro_colors, file='neutro_mod_colors')
neutro_colors = mergedColors
neutro_MEs = mergedMEs
save(neutro_colors, file='neutro_mod_colors')
save(neutro_colors, file='neutro_mod_colors.RData')
